{"version":3,"sources":["helper.js","users.js","channels.js","groups.js","files.js","Dashboard.js","authProvider.js","dataProvider.js","MyLoginPage.js","MyUserMenu.js","MyAppBar.js","MyLayout.js","App.js","serviceWorker.js","index.js"],"names":["Helper","id","name","unixtimestamp","date","Date","year","getFullYear","month","getMonth","day","getDate","byte","Math","pow","toFixed","a","b","field","valA","valB","tempArray","split","length","array","cmp","stabilizedThis","map","el","index","sort","order","_this","this","desc","UserList","props","react_default","createElement","List","Object","assign","bulkActionButtons","Datagrid","rowClick","FileField","label","source","title","target","TextField","ImageField","FunctionField","render","user","is_admin","deleted","ChannelList","record","convertDate","created","GroupList","FileList","filters","files_FileFilter","actions","files_PostActions","files_FileBulkActionButtons","Responsive","small","SimpleList","primaryText","secondaryText","m_users","tertiaryText","toLocaleDateString","medium","files_FileDatagrid","src","ArrayField","sortable","SingleFieldList","ChipField","toSizeString","size","PostActions","_ref","bulkActions","basePath","currentSort","displayedFilters","exporter","filterValues","onUnselectItems","resource","selectedIds","showFilter","total","CardActions","React","cloneElement","context","ExportButton","disabled","filter","FileBulkActionButtons","react","BulkDeleteButton","FileFilter","Filter","TextInput","alwaysOn","AutocompleteArrayInput","choices","JSON","parse","sessionStorage","getItem","allowEmpty","getFileTypes","FileDatagridRow","_ref2","onToggleItem","children","selected","TableRow_default","key","TableCell_default","padding","localStorage","user_id","Checkbox_default","checked","onClick","Children","concat","FileDatagridBody","DatagridBody","row","files_FileDatagridRow","FileDatagrid","body","files_FileDatagridBody","Dashboard","Card_default","CardHeader_default","CardContent_default","href","authProvider","type","params","AUTH_LOGIN","username","setItem","Promise","resolve","AUTH_LOGOUT","clear","AUTH_ERROR","status","removeItem","reject","AUTH_CHECK","API_URL","TOKEN","access_token","CURRENT_USER","PREFIX","dataProvider","fileIds","console","group","log","groupEnd","GET_LIST","window","demo","handleData","storageObject","all","getAllChannels","getAllUsers","then","values","listChannels","listUsers","allChannels","allUsers","param","is_dev","get","response","result","files","file","channels","getUserNameByFile","getChannelNamesByFile","push","isInTheChannel","fChannelId","i","paging","pages","listUrl","page","url","res","value","stringify","allFiles","users","groups","DELETE_MANY","ids","_loop2","fetch","method","includes","data","filterKeys","keys","_i","_filterKeys","Array","isArray","isCheckArray","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","v","filterDataArray","err","return","searchDataArray","hasOwnProperty","document","getElementById","childNodes","innerHTML","getSizeOfListFile","addEventListener","list","stableSort","getSorting","_params$pagination","pagination","perPage","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","filterValue","dataArray","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","toLowerCase","indexOf","startSlice","endSlice","slice","finalChannels","compactChannels","channel","is_archived","members","j","uniqueChannels","item","pos","_loop","find","obj","error","aStyle","position","left","top","MyLoginPage","submit","e","preventDefault","userLogin","style","alt","height","width","srcSet","Component","connect","MyCustomIcon","withStyles","avatar","classes","Avatar_default","className","profile","image_32","MyUserMenu","UserMenu","icon","MenuItemLink","to","leftIcon","Settings_default","MyAppBar","flex","textOverflow","whiteSpace","overflow","spacer","objectWithoutProperties","AppBar","userMenu","src_MyUserMenu","Typography_default","variant","color","display_name","MyLayout","Layout","appBar","App","Admin","appLayout","loginPage","dashboard","Resource","FileIcon","UserIcon","Boolean","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRA0FeA,8GAxFP,MAAO,CACH,CAACC,GAAI,MAAOC,KAAM,OAClB,CAACD,GAAI,MAAOC,KAAM,OAClB,CAACD,GAAI,MAAOC,KAAM,OAClB,CAACD,GAAI,MAAOC,KAAM,OAClB,CAACD,GAAI,OAAQC,KAAM,QACnB,CAACD,GAAI,MAAOC,KAAM,OAClB,CAACD,GAAI,OAAQC,KAAM,QACnB,CAACD,GAAI,MAAOC,KAAM,OAClB,CAACD,GAAI,MAAOC,KAAM,4CAIPC,GAIf,IAAIC,EAAO,IAAIC,KAAmB,IAAdF,GAEhBG,EAAOF,EAAKG,cAGZC,EAAQJ,EAAKK,WAAa,EAC1BD,EAAQ,KACRA,EAAQ,IAAMA,GAGlB,IAAIE,EAAMN,EAAKO,UAWf,OAVID,EAAM,KACNA,EAAM,IAAMA,GASTA,EAAM,IAAMF,EAAQ,IAAMF,uCAGjBM,GAChB,OAAIA,EAAOC,KAAKC,IAAI,EAAG,IACZF,EAAO,KACPA,EAAOC,KAAKC,IAAI,EAAG,KAClBF,EAAOC,KAAKC,IAAI,EAAG,KAAKC,QAAQ,GAAK,MACtCH,EAAOC,KAAKC,IAAI,EAAG,KAClBF,EAAOC,KAAKC,IAAI,EAAG,KAAKC,QAAQ,GAAK,MACtCH,EAAOC,KAAKC,IAAI,EAAG,KAClBF,EAAOC,KAAKC,IAAI,EAAG,KAAKC,QAAQ,GAAK,WAD1C,+BAMCC,EAAGC,EAAGC,GACd,IAAIC,EAAOH,EAAEE,GACTE,EAAOH,EAAEC,GACTG,EAAYH,EAAMI,MAAM,KAK5B,OAJyB,IAArBD,EAAUE,SACVJ,EAAOH,EAAEK,EAAU,IAAIA,EAAU,IACjCD,EAAOH,EAAEI,EAAU,IAAIA,EAAU,KAEjCD,EAAOD,GACC,EAERC,EAAOD,EACA,EAEJ,qCAGOK,EAAOC,GACrB,IAAMC,EAAiBF,EAAMG,IAAI,SAACC,EAAIC,GAAL,MAAe,CAACD,EAAIC,KAMrD,OALAH,EAAeI,KAAK,SAACd,EAAGC,GACpB,IAAMc,EAAQN,EAAIT,EAAE,GAAIC,EAAE,IAC1B,OAAc,IAAVc,EAAoBA,EACjBf,EAAE,GAAKC,EAAE,KAEbS,EAAeC,IAAI,SAAAC,GAAE,OAAIA,EAAG,wCAGrBG,EAAOb,GAAO,IAAAc,EAAAC,KAC5B,MAAiB,SAAVF,EAAmB,SAACf,EAAGC,GAAJ,OAAUe,EAAKE,KAAKlB,EAAGC,EAAGC,IAAS,SAACF,EAAGC,GAAJ,OAAYe,EAAKE,KAAKlB,EAAGC,EAAGC,aChFpFiB,EAAW,SAAAC,GAAK,OACzBC,EAAArB,EAAAsB,cAACC,EAAA,EAADC,OAAAC,OAAA,GAAUL,EAAV,CAAiBM,mBAAmB,IAChCL,EAAArB,EAAAsB,cAACK,EAAA,EAAD,CAAUC,SAAS,QACfP,EAAArB,EAAAsB,cAACO,EAAA,EAAD,CAAWC,MAAM,OAAOC,OAAO,yBAAyBC,MAAM,SAASC,OAAO,WAC9EZ,EAAArB,EAAAsB,cAACY,EAAA,EAAD,CAAWH,OAAO,KAAKD,MAAM,OAC7BT,EAAArB,EAAAsB,cAACa,EAAA,EAAD,CAAYJ,OAAO,mBAAmBD,MAAM,WAC5CT,EAAArB,EAAAsB,cAACY,EAAA,EAAD,CAAWH,OAAO,OAAOD,MAAM,SAC/BT,EAAArB,EAAAsB,cAACY,EAAA,EAAD,CAAWH,OAAO,uBAAuBD,MAAM,iBAC/CT,EAAArB,EAAAsB,cAACY,EAAA,EAAD,CAAWH,OAAO,gBAAgBD,MAAM,UACxCT,EAAArB,EAAAsB,cAACc,EAAA,EAAD,CAAeL,OAAO,WAAWM,OAAQ,SAAAC,GAAI,OAAIA,EAAKC,SAAW,QAAU,UAAUT,MAAM,SAC3FT,EAAArB,EAAAsB,cAACc,EAAA,EAAD,CAAeL,OAAO,UAAUM,OAAQ,SAAAC,GAAI,OAAIA,EAAKE,QAAU,UAAY,IAAIV,MAAM,eCTpFW,EAAc,SAAArB,GAAK,OAC5BC,EAAArB,EAAAsB,cAACC,EAAA,EAADC,OAAAC,OAAA,GAAUL,EAAV,CAAiBM,mBAAmB,IAChCL,EAAArB,EAAAsB,cAACK,EAAA,EAAD,CAAUC,SAAS,QACfP,EAAArB,EAAAsB,cAACY,EAAA,EAAD,CAAWH,OAAO,OAAOD,MAAM,SAC/BT,EAAArB,EAAAsB,cAACc,EAAA,EAAD,CAAeL,OAAO,UAAUD,MAAM,UAAUO,OAAQ,SAAAK,GAAM,OAAI1D,EAAO2D,YAAYD,EAAOE,eCJ3FC,EAAY,SAAAzB,GAAK,OAC1BC,EAAArB,EAAAsB,cAACC,EAAA,EAADC,OAAAC,OAAA,GAAUL,EAAV,CAAiBM,mBAAmB,IAChCL,EAAArB,EAAAsB,cAACK,EAAA,EAAD,CAAUC,SAAS,QACfP,EAAArB,EAAAsB,cAACY,EAAA,EAAD,CAAWH,OAAO,OAAOD,MAAM,SAC/BT,EAAArB,EAAAsB,cAACc,EAAA,EAAD,CAAeL,OAAO,UAAUD,MAAM,UAAUO,OAAQ,SAAAK,GAAM,OAAI1D,EAAO2D,YAAYD,EAAOE,wLCI3FE,EAAW,SAAA1B,GAAK,OACzBC,EAAArB,EAAAsB,cAACC,EAAA,EAADC,OAAAC,OAAA,CAAMsB,QAAS1B,EAAArB,EAAAsB,cAAC0B,EAAD,MAAgBC,QAAS5B,EAAArB,EAAAsB,cAAC4B,EAAD,OAAqB9B,EAA7D,CAAoEM,kBAAmBL,EAAArB,EAAAsB,cAAC6B,EAAD,QACnF9B,EAAArB,EAAAsB,cAAC8B,EAAA,EAAD,CACIC,MACIhC,EAAArB,EAAAsB,cAACgC,EAAA,EAAD,CACIC,YAAa,SAAAb,GAAM,OAAIA,EAAOV,OAC9BwB,cAAe,SAAAd,GAAM,OAAIA,EAAOe,SAChCC,aAAc,SAAAhB,GAAM,OAAI,IAAIrD,KAAKqD,EAAOE,SAASe,wBAGzDC,OACIvC,EAAArB,EAAAsB,cAACuC,EAAD,KACIxC,EAAArB,EAAAsB,cAACO,EAAA,EAAD,CAAWC,MAAM,OAAOC,OAAO,cAAc+B,IAAI,cAAc9B,MAAM,QAAQC,OAAO,WACpFZ,EAAArB,EAAAsB,cAACY,EAAA,EAAD,CAAWJ,MAAM,OAAOC,OAAO,YAC/BV,EAAArB,EAAAsB,cAACyC,EAAA,EAAD,CAAYjC,MAAM,UAAUC,OAAO,aAAaiC,UAAU,GACtD3C,EAAArB,EAAAsB,cAAC2C,EAAA,EAAD,KACI5C,EAAArB,EAAAsB,cAAC4C,EAAA,EAAD,CAAWnC,OAAO,WAG1BV,EAAArB,EAAAsB,cAACa,EAAA,EAAD,CAAYL,MAAM,YAAYC,OAAO,WAAWiC,UAAU,IAC1D3C,EAAArB,EAAAsB,cAACc,EAAA,EAAD,CAAeL,OAAO,OAAOM,OAAQ,SAAAK,GAAM,OAAI1D,EAAOmF,aAAazB,EAAO0B,SAC1E/C,EAAArB,EAAAsB,cAACc,EAAA,EAAD,CAAeL,OAAO,UAAUD,MAAM,UAAUO,OAAQ,SAAAK,GAAM,OAAI1D,EAAO2D,YAAYD,EAAOE,iBAO1GyB,EAAc,SAAAC,GAAA,IAChBC,EADgBD,EAChBC,YACAC,EAFgBF,EAEhBE,SACAC,EAHgBH,EAGhBG,YACAC,EAJgBJ,EAIhBI,iBACAC,EALgBL,EAKhBK,SACA5B,EANgBuB,EAMhBvB,QACA6B,EAPgBN,EAOhBM,aACAC,EARgBP,EAQhBO,gBACAC,EATgBR,EAShBQ,SACAC,EAVgBT,EAUhBS,YACAC,EAXgBV,EAWhBU,WACAC,EAZgBX,EAYhBW,MAZgB,OAchB5D,EAAArB,EAAAsB,cAAC4D,EAAA,EAAD,KACKX,GAAeY,IAAMC,aAAab,EAAa,CAC5CC,WACAI,eACAE,WACAC,cACAF,oBAEH9B,GAAWoC,IAAMC,aAAarC,EAAS,CACpC+B,WACAE,aACAN,mBACAE,eACAS,QAAS,WAEbhE,EAAArB,EAAAsB,cAACgE,EAAA,EAAD,CACIC,SAAoB,IAAVN,EACVH,SAAUA,EACVhE,KAAM2D,EACNe,OAAQZ,EACRD,SAAUA,MAKhBc,EAAwB,SAAArE,GAAK,OAC/BC,EAAArB,EAAAsB,cAACoE,EAAA,SAAD,KAEIrE,EAAArB,EAAAsB,cAACqE,EAAA,EAAqBvE,KAIxBwE,EAAa,SAACxE,GAAD,OACfC,EAAArB,EAAAsB,cAACuE,EAAA,EAAWzE,EACRC,EAAArB,EAAAsB,cAACwE,EAAA,EAAD,CAAWhE,MAAM,SAASC,OAAO,OAAOgE,UAAQ,IAChD1E,EAAArB,EAAAsB,cAAC0E,EAAA,EAAD,CAAwBjE,OAAO,OAAOkE,QAAUC,KAAKC,MAAMC,eAAeC,QAAQ,UAAYC,YAAU,IACxGjF,EAAArB,EAAAsB,cAAC0E,EAAA,EAAD,CAAwBjE,OAAO,WAAWkE,QAAUC,KAAKC,MAAMC,eAAeC,QAAQ,aAAeC,YAAU,IAC/GjF,EAAArB,EAAAsB,cAAC0E,EAAA,EAAD,CAAwBjE,OAAO,WAAWkE,QAAUjH,EAAOuH,eAAiBD,YAAU,MAIxFE,EAAkB,SAAAC,GAAA,IAAG/D,EAAH+D,EAAG/D,OAAQoC,EAAX2B,EAAW3B,SAAU7F,EAArBwH,EAAqBxH,GAAIyH,EAAzBD,EAAyBC,aAAcC,EAAvCF,EAAuCE,SAAUC,EAAjDH,EAAiDG,SAAUpC,EAA3DiC,EAA2DjC,SAA3D,OACpBnD,EAAArB,EAAAsB,cAACuF,EAAA7G,EAAD,CAAU8G,IAAK7H,GAEXoC,EAAArB,EAAAsB,cAACyF,EAAA/G,EAAD,CAAWgH,QAAQ,SAEXtE,EAAOJ,OAAS4D,KAAKC,MAAMc,aAAaZ,QAAQ,SAASa,SACtDhB,KAAKC,MAAMc,aAAaZ,QAAQ,SAAS/D,KAAKC,WAElDlB,EAAArB,EAAAsB,cAAC6F,EAAAnH,EAAD,CACCoH,QAASR,EACTS,QAAS,kBAAMX,EAAazH,OAInCkG,IAAMmC,SAAS3G,IAAIgG,EAAU,SAAAzG,GAAK,OAC/BmB,EAAArB,EAAAsB,cAACyF,EAAA/G,EAAD,CAAW8G,IAAG,GAAAS,OAAKtI,EAAL,KAAAsI,OAAWrH,EAAMkB,MAAMW,SAChCoD,IAAMC,aAAalF,EAAO,CACvBwC,SACA8B,WACAM,kBAOd0C,EAAmB,SAAApG,GAAK,OAAIC,EAAArB,EAAAsB,cAACmG,EAAA,EAADjG,OAAAC,OAAA,GAAkBL,EAAlB,CAAyBsG,IAAKrG,EAAArB,EAAAsB,cAACqG,EAAD,UAC1DC,EAAe,SAAAxG,GAAK,OAAIC,EAAArB,EAAAsB,cAACK,EAAA,EAADH,OAAAC,OAAA,GAAcL,EAAd,CAAqByG,KAAMxG,EAAArB,EAAAsB,cAACwG,EAAD,uGCrH1CC,GAAA,kBACX1G,EAAArB,EAAAsB,cAAC0G,EAAAhI,EAAD,KACIqB,EAAArB,EAAAsB,cAAC2G,GAAAjI,EAAD,CAAYgC,MAAM,kCAClBX,EAAArB,EAAAsB,cAAC4G,EAAAlI,EAAD,mDAAwDqB,EAAArB,EAAAsB,cAAA,KAAG6G,KAAK,+DAAR,6BCNjDC,GAAA,SAACC,EAAMC,GAElB,GAAID,IAASE,KAAY,KACbC,EAAaF,EAAbE,SAGR,OAFAvB,aAAawB,QAAQ,WAAYD,GAE1BE,QAAQC,UAGnB,GAAIN,IAASO,KAGT,OAFA3B,aAAa4B,QACbzC,eAAeyC,QACRH,QAAQC,UAGnB,GAAIN,IAASS,KAAY,KACbC,EAAWT,EAAXS,OACR,OAAe,MAAXA,GAA6B,MAAXA,GAClB9B,aAAa+B,WAAW,YACjBN,QAAQO,UAEZP,QAAQC,UAGnB,OAAIN,IAASa,KACFjC,aAAaZ,QAAQ,QACtBqC,QAAQC,UACRD,QAAQO,SAEXP,QAAQO,OAAO,sCCjBpBE,GAAU,wBACVC,GAAQnC,aAAaZ,QAAQ,QAAUH,KAAKC,MAAMc,aAAaZ,QAAQ,SAASgD,aAAe,GAC/FC,GAAerC,aAAaZ,QAAQ,QAAUH,KAAKC,MAAMc,aAAaZ,QAAQ,SAAS/D,KAAO,GAC9FiH,GAAS,KAQAC,GAAA,SAACnB,EAAMvD,EAAUwD,GAmUhC,IAAqBmB,EAlUjB,GAAKL,GAOL,OANAM,QAAQC,MAAM,6CACdD,QAAQE,IAAIvB,GACZqB,QAAQE,IAAI9E,GACZ4E,QAAQE,IAAItB,GACZoB,QAAQG,WAEDxB,GACH,KAAKyB,KACD,OAAOhF,GACH,IAAK,QACD,GAAIiF,OAAOC,KACP,OAAOC,GAAW3B,EAAQyB,OAAOC,MAC9B,GAAI5D,eAAeC,QAAQ,SAAU,CACxC,IAAI6D,EAAgBhE,KAAKC,MAAMC,eAAeC,QAAQ,UACtD,OAAO4D,GAAW3B,EAAQ4B,GAE9B,OAAOxB,QAAQyB,IAAI,CAACC,KAAkBC,OAAgBC,KAAK,SAAAC,GACvD,IA6KHC,EAAcC,EA7KPC,EAAcH,EAAO,GACrBI,EAAWJ,EAAO,GACtB,OA2KHC,EA3KsBE,EA2KRD,EA3KqBE,EA4K7C,IAAIjC,QAAQ,SAASC,EAASM,GACjC,IAAI2B,EAAQ,GACPtB,GAAa/G,UAAa+G,GAAauB,SACxCD,EAAK,SAAArD,OAAY+B,GAAarK,KAElC6L,eAAG,GAAAvD,OAAI4B,GAAJ,sBAAA5B,OAAgC6B,IAAhC7B,OAAwCqD,EAAxC,sBAAkEN,KAAK,SAAAS,GACtE,IAAIC,EAAS,GA2Bb,GAzBAD,EAASE,MAAMtK,IAAI,SAAAuK,GACf,GAAK5B,GAAauB,QAAWK,EAAKC,SAkB9BD,EAAK3B,GAAS,SAAW6B,GAAkBX,EAAWS,GACtDA,EAAK3B,GAAS,YAAc8B,GAAsBb,EAAcU,GAChEF,EAAOM,KAAKJ,OApB4B,CACxC,IAAIK,GAAiB,EACrBL,EAAKC,SAASxK,IAAI,SAAA6K,GACd,IAAK,IAAIC,EAAI,EAAGA,EAAIjB,EAAajK,OAAQkL,IACrC,GAAIjB,EAAaiB,GAAGxM,KAAOuM,EAAY,CACnCD,GAAiB,EACjB,SAMRA,IACAL,EAAK3B,GAAS,SAAW6B,GAAkBX,EAAWS,GACtDA,EAAK3B,GAAS,YAAc8B,GAAsBb,EAAcU,GAChEF,EAAOM,KAAKJ,OASpBH,EAASW,OAAOC,MAAQ,EAAG,CAE3B,IADA,IAAIC,EAAU,GACLC,EAAO,EAAGA,GAAQd,EAASW,OAAOC,MAAOE,IAC9CD,EAAQN,KAAR,GAAA/D,OAAgB4B,GAAhB,sBAAA5B,OAA4C6B,IAA5C7B,OAAoDqD,EAApD,oBAAArD,OAA4EsE,IAEhFnD,QAAQyB,IACJyB,EAAQjL,IAAI,SAAAmL,GACR,OAAOhB,eAAIgB,GAAKxB,KAAK,SAAAyB,GACjB,OAAOA,OAGjBzB,KAAK,SAAAC,GACHA,EAAO5J,IAAI,SAAAqL,GACPA,EAAMf,MAAMtK,IAAI,SAAAuK,GACZ,IAAIK,GAAiB,EAChBjC,GAAauB,QAiBdK,EAAK3B,GAAS,SAAW6B,GAAkBX,EAAWS,GACtDA,EAAK3B,GAAS,YAAc8B,GAAsBb,EAAcU,GAChEF,EAAOM,KAAKJ,KAlBZA,EAAKC,SAASxK,IAAI,SAAA6K,GACd,IAAK,IAAIC,EAAI,EAAGA,EAAIjB,EAAajK,OAAQkL,IACrC,GAAIjB,EAAaiB,GAAGxM,KAAOuM,EAAY,CACnCD,GAAiB,EACjB,SAMRA,IACAL,EAAK3B,GAAS,SAAW6B,GAAkBX,EAAWS,GACtDA,EAAK3B,GAAS,YAAc8B,GAAsBb,EAAcU,GAChEF,EAAOM,KAAKJ,SAS5B9E,eAAeqC,QAAQ,QAASvC,KAAK+F,UAAUjB,IAC/CrC,EAAQqC,UAGZ5E,eAAeqC,QAAQ,QAASvC,KAAK+F,UAAUjB,IAC/CrC,EAAQqC,QAxP0CV,KAAK,SAAA4B,GAC3C,OAAOjC,GAAW3B,EAAQ4D,OAGtC,IAAK,QACD,OAAO7B,KAAcC,KAAK,SAAA6B,GACtB,OAAOlC,GAAW3B,EAAQ6D,KAElC,IAAK,WACD,OAAO/B,KAAiBE,KAAK,SAAAa,GACzB,OAAOlB,GAAW3B,EAAQ6C,KAElC,IAAK,SACD,OAwIT,IAAIzC,QAAQ,SAASC,EAASM,GACjC,IAAI2B,EAAQ,GACRtB,GAAauB,SACbD,EAAQ,0BAEZE,eAAG,GAAAvD,OAAI4B,GAAJ,uBAAA5B,OAAiC6B,IAAjC7B,OAAyCqD,IAASN,KAAK,SAAAS,GACtD3E,eAAeqC,QAAQ,SAAUvC,KAAK+F,UAAUlB,EAASqB,SACzDzD,EAAQoC,EAASqB,YA/Ia9B,KAAK,SAAA8B,GACvB,OAAOnC,GAAW3B,EAAQ8D,KAGtC,MAEJ,KAAKC,KA2RQ5C,EA1RGnB,EAAOgE,IA2RpB,IAAI5D,QAAQ,SAASC,EAASM,GAEjC,IADA,IAAIgC,EAAQxB,EAD6B8C,EAAA,SAEhCd,GACLe,MAAK,GAAAjF,OAAI4B,GAAJ,wBAAA5B,OAAkC6B,GAAlC,UAAA7B,OAAgDkC,EAAQgC,IAAM,CAACgB,OAAQ,SAASnC,KAAK,SAAAyB,GACtFd,EAAQxB,EAAQjE,OAAO,SAAA0F,GAAI,OAAIA,IAASzB,EAAQgC,QAF/CA,EAAE,EAAGA,EAAIhC,EAAQlJ,OAAQkL,IAAKc,EAA9Bd,GAKT,IAAIS,EAAWhG,KAAKC,MAAMC,eAAeC,QAAQ,UAAUb,OAAO,SAAA0F,GAC9D,OAAQD,EAAMyB,SAASxB,EAAKjM,MAEhCmH,eAAeqC,QAAQ,QAASvC,KAAK+F,UAAUC,IAC/CnC,OAAOC,KAAOkC,IArSd,QACI,SAWNjC,GAAa,SAAC3B,EAAQqE,GAExBA,EAAOA,EAAKnH,OAAO,SAAAwG,GAAK,OAoC5B,SAAgBW,EAAM5J,GAGlB,IAFA,IAAM6J,EAAapL,OAAOqL,KAAK9J,GAE/B+J,EAAA,EAAAC,EAAgBH,EAAhBE,EAAAC,EAAAxM,OAAAuM,IAA4B,CAAvB,IAAIhG,EAAGiG,EAAAD,GAER,GAAIE,MAAMC,QAAQlK,EAAQ+D,IAAO,CAC7B,IAAIoG,GAAe,EADUC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAE7B,QAAAC,EAAAC,EAAczK,EAAQ+D,GAAtB2G,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA4B,KAAnBU,EAAmBN,EAAAvB,MACxB,GAAIgB,MAAMC,QAAQN,EAAK7F,KACnB,GAAIgH,GAAgBD,EAAGlB,EAAK7F,IAAO,CAC/BoG,GAAe,EACf,YAED,GAAIP,EAAK7F,KAAS+G,EAAG,CACxBX,GAAe,EACf,QAVqB,MAAAa,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,GAa7B,IAAKH,EAAc,OAAO,OACvB,GAAIF,MAAMC,QAAQN,EAAK7F,KAC1B,IAAKgH,GAAgB/K,EAAQ+D,GAAM6F,EAAK7F,IAAO,OAAO,OACnD,GAAI6F,EAAK7F,KAAS/D,EAAQ+D,KACxBmH,GAAgBlL,EAAQ+D,GAAM6F,EAAK7F,IAAO,OAAO,EAI9D,OAAO,EA9DqBtB,CAAOwG,EAAO1D,EAAO9C,UAC7CwH,MAAMC,QAAQN,IAASA,EAAKpM,OAAS,GACjCoM,EAAK,IAAMA,EAAK,GAAGuB,eAAe,cAE9BC,SAASC,eAAe,qBACxBD,SAASC,eAAe,qBAAqBC,WAAW,GAAGC,UAAYtP,EAAOmF,aAAaoK,GAAkB5B,IAE7GwB,SAASK,iBAAiB,mBAAoB,WAC1CL,SAASC,eAAe,qBAAqBC,WAAW,GAAGC,UAAYtP,EAAOmF,aAAaoK,GAAkB5B,OAM7H,IAAI8B,EAAOzP,EAAO0P,WACd/B,EACA3N,EAAO2P,WAAWrG,EAAOxH,KAAKC,MAAOuH,EAAOxH,KAAKZ,QAlBpB0O,EAqBXtG,EAAOuG,WAAxBhD,EArB4B+C,EAqB5B/C,KAAMiD,EArBsBF,EAqBtBE,QACX,MAAO,CACHnC,KAAMkC,GAAWhD,EAAMiD,EAASL,GAChCxJ,MAAOwJ,EAAKlO,SAIpB,SAASgO,GAAkBtD,GACvB,IAAI7G,EAAO,EADmB2K,GAAA,EAAAC,GAAA,EAAAC,OAAA3B,EAAA,IAE9B,QAAA4B,EAAAC,EAAiBlE,EAAjBwC,OAAAC,cAAAqB,GAAAG,EAAAC,EAAAxB,QAAAC,MAAAmB,GAAA,EAAwB,CACpB3K,GADoB8K,EAAAlD,MACP5H,MAHa,MAAA2J,GAAAiB,GAAA,EAAAC,EAAAlB,EAAA,YAAAgB,GAAA,MAAAI,EAAAnB,QAAAmB,EAAAnB,SAAA,WAAAgB,EAAA,MAAAC,GAM9B,OAAO7K,EAiCX,SAAS0J,GAAgBsB,EAAaC,GAAW,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAlC,EAAA,IAC7C,QAAAmC,EAAAC,EAAcL,EAAd5B,OAAAC,cAAA4B,GAAAG,EAAAC,EAAA/B,QAAAC,MAAA0B,GAAA,EAAyB,CACrB,GAAIF,IADiBK,EAAAzD,MAEjB,OAAO,GAH8B,MAAA+B,GAAAwB,GAAA,EAAAC,EAAAzB,EAAA,YAAAuB,GAAA,MAAAI,EAAA1B,QAAA0B,EAAA1B,SAAA,WAAAuB,EAAA,MAAAC,GAM7C,OAAO,EAGX,SAASvB,GAAgBmB,EAAaC,GAElC,OAAe,IADHA,EAAUM,cAAcC,QAAQR,EAAYO,eAO5D,IAAMd,GAAa,SAAChD,EAAMiD,EAASnC,GAE/B,IAAIkD,GADJhE,GAAc,GACUiD,EACpBgB,EAAWD,EAAaf,EAC5B,OAAOnC,EAAKoD,MAAMF,EAAYC,IAGlC,SAAS1F,KACL,OAAO,IAAI1B,QAAQ,SAASC,EAASM,GACjC6B,eAAG,GAAAvD,OAAI4B,GAAJ,yBAAA5B,OAAmC6B,GAAnC,gBAAuDkB,KAAK,SAAAS,GAC3D,IAAMiF,EAAgBC,GAAgBlF,EAASI,UAC/C/E,eAAeqC,QAAQ,WAAYvC,KAAK+F,UAAUgE,GAAgBD,KAClErH,EAAQqH,OAWpB,SAASC,GAAgB9E,GACrB,OAAI7B,GAAauB,OACNM,EAEAA,EAAS3F,OAAO,SAAC0K,GAAD,OAAcA,EAAQC,aAAeD,EAAQE,QAAQ1D,SAASpD,GAAarK,MAiB1G,SAASoL,KACL,OAAO,IAAI3B,QAAQ,SAASC,EAASM,GACjC6B,eAAG,GAAAvD,OAAI4B,GAAJ,sBAAA5B,OAAgC6B,GAAhC,gBAAoDkB,KAAK,SAAAS,GACxD3E,eAAeqC,QAAQ,QAASvC,KAAK+F,UAAUlB,EAASqF,UACxDzH,EAAQoC,EAASqF,aAgG7B,SAAShF,GAAkBX,EAAWS,GAClC,IAAK,IAAImF,EAAI,EAAGA,EAAI5F,EAAUlK,OAAQ8P,IAClC,GAAInF,EAAI,OAAaT,EAAU4F,GAAV,GACjB,OAAO5F,EAAU4F,GAAV,KAIf,MAAO,UAWX,SAAShF,GAAsBb,EAAcU,GAMzC,IALA,IAAIoF,EAAiBpF,EAAKC,SAAS3F,OAAO,SAAS+K,EAAMC,GACrD,OAAOtF,EAAKC,SAASyE,QAAQW,IAASC,IAEtCxF,EAAS,GAEJS,EAAI,EAAGA,EAAI6E,EAAe/P,OAAQkL,IACvC,IAD4C,IAAAgF,EAAA,SACnCJ,GACDC,EAAe7E,KAAOjB,EAAa6F,GAAGpR,KAClC+L,EAAO0F,KAAK,SAAAC,GAAG,OAAIA,EAAI1R,KAAOuL,EAAa6F,GAAGpR,MAC9CyK,QAAQkH,MAAM1F,GAElBF,EAAOM,KAAK,CACRrM,GAAIuL,EAAa6F,GAAGpR,GACpBC,KAAMsL,EAAa6F,GAAGnR,SAPzBmR,EAAI,EAAGA,EAAI7F,EAAajK,OAAQ8P,IAAKI,EAArCJ,GAab,OAAOrF,uDCnVL6F,YAAS,CACXC,SAAU,WACVC,KAAM,sBACNC,IAAK,uBAGHC,gNACFC,OAAS,SAACC,GACNA,EAAEC,iBAKFpQ,EAAKI,MAAMiQ,UAHS,8EAOpB,OACIhQ,EAAArB,EAAAsB,cAAA,KAAGgQ,MAAOT,GAAQ1I,KAAK,4KAGnB9G,EAAArB,EAAAsB,cAAA,OAAKiQ,IAAI,qBACTC,OAAO,KAAKC,MAAM,MAClB3N,IAAI,6DACJ4N,OAAO,4IAlBGC,aAwBXC,2BAAQtE,EAAW,CAAE+D,wBAArBO,CAAkCX,8HCxB3CY,GAAeC,sBAPK,CACtBC,OAAQ,CACJP,OAAQ,GACRC,MAAO,KAIMK,CACjB,SAAAxN,GAAA,IAAG0N,EAAH1N,EAAG0N,QAAH,OACI3Q,EAAArB,EAAAsB,cAAA,WACID,EAAArB,EAAAsB,cAAC2Q,GAAAjS,EAAD,CACIf,GAAG,SACHiT,UAAWF,EAAQD,OACnBjO,IAAKmD,aAAaZ,QAAQ,QAAUH,KAAKC,MAAMc,aAAaZ,QAAQ,SAAS/D,KAAK6P,QAAQC,SAAW,QAgBtGC,GAVI,SAAAjR,GAAK,OACpBC,EAAArB,EAAAsB,cAACgR,GAAA,EAAD9Q,OAAAC,OAAA,GAAcL,EAAd,CAAqBmR,KAAMlR,EAAArB,EAAAsB,cAACuQ,GAAD,QACvBxQ,EAAArB,EAAAsB,cAACkR,GAAA,EAAD,CACIC,GAAG,iBACHlP,YAAY,gBACZmP,SAAUrR,EAAArB,EAAAsB,cAACqR,GAAA3S,EAAD,UCCP4S,GAZEd,sBAZF,CACX9P,MAAO,CACH6Q,KAAM,EACNC,aAAc,WACdC,WAAY,SACZC,SAAU,UAEdC,OAAQ,CACJJ,KAAM,IAIGf,CAAmB,SAAAxN,GAAA,IAAG0N,EAAH1N,EAAG0N,QAAY5Q,EAAfI,OAAA0R,GAAA,EAAA1R,CAAA8C,EAAA,oBAChCjD,EAAArB,EAAAsB,cAAC6R,GAAA,EAAD3R,OAAAC,OAAA,GAAYL,EAAZ,CAAmBgS,SAAU/R,EAAArB,EAAAsB,cAAC+R,GAAD,QACzBhS,EAAArB,EAAAsB,cAACgS,GAAAtT,EAAD,CACIuT,QAAQ,QACRC,MAAM,UACNtB,UAAWF,EAAQhQ,MACnB/C,GAAG,sBAEPoC,EAAArB,EAAAsB,cAAA,QAAMrC,GAAG,qBAAqBiT,UAAWF,EAAQiB,QAAUhM,aAAaZ,QAAQ,QAAWH,KAAKC,MAAMc,aAAaZ,QAAQ,SAAS/D,KAAK6P,QAAQsB,aAAe,OCrBzJC,GAFE,SAACtS,GAAD,OAAWC,EAAArB,EAAAsB,cAACqS,GAAA,EAADnS,OAAAC,OAAA,GAAYL,EAAZ,CAAmBwS,OAAQhB,OCoBxCiB,GATH,kBACVxS,EAAArB,EAAAsB,cAACwS,EAAA,EAAD,CAAOC,UAAWL,GAAUM,UAAW/C,GAAagD,UAAWlM,GAAWK,aAAcA,GAAcoB,aAAcA,IAClHnI,EAAArB,EAAAsB,cAAC4S,EAAA,EAAD,CAAUhV,KAAK,QAAQuP,KAAM3L,EAAUyP,KAAM4B,MAC7C9S,EAAArB,EAAAsB,cAAC4S,EAAA,EAAD,CAAUhV,KAAK,QAAQuP,KAAMtN,EAAUoR,KAAM6B,MAC7C/S,EAAArB,EAAAsB,cAAC4S,EAAA,EAAD,CAAUhV,KAAK,WAAWuP,KAAMhM,EAAa8P,KAAM6B,MACnD/S,EAAArB,EAAAsB,cAAC4S,EAAA,EAAD,CAAUhV,KAAK,SAASuP,KAAM5L,EAAW0P,KAAM6B,QCR/BC,QACW,cAA7BtK,OAAOuK,SAASC,UAEe,UAA7BxK,OAAOuK,SAASC,UAEhBxK,OAAOuK,SAASC,SAASC,MACvB,2DCZNC,IAASpS,OAAOhB,EAAArB,EAAAsB,cAACoT,GAAD,MAASvG,SAASC,eAAe,SD2H3C,kBAAmBuG,WACrBA,UAAUC,cAAcC,MAAMvK,KAAK,SAAAwK,GACjCA,EAAaC","file":"static/js/main.9d2e6753.chunk.js","sourcesContent":["class Helper{\n    static getFileTypes(){\n        return [\n            {id: 'jpg', name: 'jpg'},\n            {id: 'png', name: 'png'},\n            {id: 'gif', name: 'gif'},\n            {id: 'zip', name: 'zip'},\n            {id: 'text', name: 'text'},\n            {id: 'doc', name: 'doc'},\n            {id: 'docx', name: 'docx'},\n            {id: 'pdf', name: 'pdf'},\n            {id: 'mp4', name: 'mp4'}\n        ];\n    }\n\n    static convertDate(unixtimestamp){\n        // Months array\n        // const months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n        // Convert timestamp to milliseconds\n        var date = new Date(unixtimestamp*1000);\n        // Year\n        var year = date.getFullYear();\n        // Month\n        // var month = months_arr[date.getMonth()];\n        var month = date.getMonth() + 1;\n        if (month < 10) {\n            month = '0' + month;\n        }\n        // Day\n        var day = date.getDate();\n        if (day < 10) {\n            day = '0' + day;\n        }\n        // Hours\n        // var hours = date.getHours();\n        // Minutes\n        // var minutes = \"0\" + date.getMinutes();\n        // Seconds\n        // var seconds = \"0\" + date.getSeconds();\n        // Display date time in dd-MM-yyyy format\n        return day + '-' + month + '-' + year;\n    }\n\n    static toSizeString(byte) {\n        if (byte < Math.pow(2, 10)) {\n            return byte + ' B';\n        } else if (byte < Math.pow(2, 20)) {\n            return (byte / Math.pow(2, 10)).toFixed(0) + ' kB';\n        } else if (byte < Math.pow(2, 30)) {\n            return (byte / Math.pow(2, 20)).toFixed(2) + ' MB';\n        } else if (byte < Math.pow(2, 40)) {\n            return (byte / Math.pow(2, 30)).toFixed(2) + ' GB';\n        }\n    }\n\n    // Sorting\n    static desc(a, b, field) {\n        let valA = a[field];\n        let valB = b[field];\n        let tempArray = field.split('.');\n        if (tempArray.length === 2) {\n            valA = a[tempArray[0]][tempArray[1]];\n            valB = b[tempArray[0]][tempArray[1]];\n        }\n        if (valB < valA) {\n            return -1;\n        }\n        if (valB > valA) {\n            return 1;\n        }\n        return 0;\n      }\n      \n    static stableSort(array, cmp) {\n        const stabilizedThis = array.map((el, index) => [el, index]);\n        stabilizedThis.sort((a, b) => {\n            const order = cmp(a[0], b[0]);\n            if (order !== 0) return order;\n            return a[1] - b[1];\n        });\n        return stabilizedThis.map(el => el[0]);\n    }\n    \n    static getSorting(order, field) {\n        return order === 'DESC' ? (a, b) => this.desc(a, b, field) : (a, b) => -(this.desc(a, b, field));\n    }\n    // End of sorting\n\n}\n\nexport default Helper;","import React from 'react';\nimport { List, Datagrid, TextField, ImageField, FileField, FunctionField } from 'react-admin';\nimport Helper from './helper.js';\n\nexport const UserList = props => (\n    <List {...props} bulkActionButtons={false} >\n        <Datagrid rowClick=\"edit\">\n            <FileField label=\"File\" source=\"profile.image_original\" title=\"avatar\" target=\"_blank\" />\n            <TextField source=\"id\" label=\"Id\" />\n            <ImageField source=\"profile.image_72\" label=\"Avatar\" />\n            <TextField source=\"name\" label=\"user\" />\n            <TextField source=\"profile.display_name\" label=\"Display name\" />\n            <TextField source=\"profile.phone\" label=\"Phone\" />\n            <FunctionField source=\"is_admin\" render={user => user.is_admin ? 'Admin' : 'Member'} label=\"Role\" />\n            <FunctionField source=\"deleted\" render={user => user.deleted ? 'Deleted' : ''} label=\"Deleted\" />\n        </Datagrid>\n    </List>\n);","// in src/channels.js\nimport React from 'react';\nimport { List, Datagrid, TextField, FunctionField } from 'react-admin';\nimport Helper from './helper.js';\n\nexport const ChannelList = props => (\n    <List {...props} bulkActionButtons={false} >\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"name\" label=\"Name\" />\n            <FunctionField source=\"created\" label=\"Created\" render={record => Helper.convertDate(record.created)}/>\n        </Datagrid>\n    </List>\n);","// in src/groups.js\nimport React from 'react';\nimport { List, Datagrid, TextField, FunctionField } from 'react-admin';\nimport Helper from './helper.js';\n\nexport const GroupList = props => (\n    <List {...props} bulkActionButtons={false} >\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"name\" label=\"Name\" />\n            <FunctionField source=\"created\" label=\"Created\" render={record => Helper.convertDate(record.created)}/>\n        </Datagrid>\n    </List>\n);","// in src/files.js\nimport React, {Fragment} from 'react';\nimport { List, Filter, Datagrid, DatagridBody, Responsive, SimpleList, SingleFieldList } from 'react-admin';\nimport { TextField, ImageField, FunctionField, DateField, ArrayField, ChipField, FileField } from 'react-admin';\nimport { TextInput, SelectArrayInput, AutocompleteArrayInput, BulkDeleteButton } from 'react-admin';\nimport Helper from './helper.js';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { CardActions, CreateButton, ExportButton, RefreshButton } from 'react-admin';\n\nexport const FileList = props => (\n    <List filters={<FileFilter />} actions={<PostActions />} {...props} bulkActionButtons={<FileBulkActionButtons />}>\n        <Responsive\n            small={\n                <SimpleList\n                    primaryText={record => record.title}\n                    secondaryText={record => record.m_users}\n                    tertiaryText={record => new Date(record.created).toLocaleDateString()}\n                />\n            }\n            medium={\n                <FileDatagrid>\n                    <FileField label=\"File\" source=\"url_private\" src=\"url_private\" title=\"title\" target=\"_blank\" />\n                    <TextField label=\"User\" source=\"m_users\" />\n                    <ArrayField label=\"Channel\" source=\"m_channels\" sortable={false} >\n                        <SingleFieldList>\n                            <ChipField source=\"name\" />\n                        </SingleFieldList>\n                    </ArrayField>\n                    <ImageField label=\"Thumbnail\" source=\"thumb_80\" sortable={false} />\n                    <FunctionField source=\"size\" render={record => Helper.toSizeString(record.size)} />\n                    <FunctionField source=\"created\" label=\"Created\" render={record => Helper.convertDate(record.created)}/>\n                </FileDatagrid>\n            }\n        />\n    </List>\n);\n\nconst PostActions = ({\n    bulkActions,\n    basePath,\n    currentSort,\n    displayedFilters,\n    exporter,\n    filters,\n    filterValues,\n    onUnselectItems,\n    resource,\n    selectedIds,\n    showFilter,\n    total\n}) => (\n    <CardActions>\n        {bulkActions && React.cloneElement(bulkActions, {\n            basePath,\n            filterValues,\n            resource,\n            selectedIds,\n            onUnselectItems,\n        })}\n        {filters && React.cloneElement(filters, {\n            resource,\n            showFilter,\n            displayedFilters,\n            filterValues,\n            context: 'button',\n        }) }\n        <ExportButton\n            disabled={total === 0}\n            resource={resource}\n            sort={currentSort}\n            filter={filterValues}\n            exporter={exporter}\n        />\n    </CardActions>\n);\n\nconst FileBulkActionButtons = props => (\n    <Fragment>\n        {/* Add the default bulk delete action */}\n        <BulkDeleteButton {...props} />\n    </Fragment>\n);\n\nconst FileFilter = (props) => (\n    <Filter {...props}>\n        <TextInput label=\"Search\" source=\"name\" alwaysOn />\n        <AutocompleteArrayInput source=\"user\" choices={ JSON.parse(sessionStorage.getItem('users')) } allowEmpty />\n        <AutocompleteArrayInput source=\"channels\" choices={ JSON.parse(sessionStorage.getItem('channels')) } allowEmpty />\n        <AutocompleteArrayInput source=\"filetype\" choices={ Helper.getFileTypes() } allowEmpty/>\n    </Filter>\n);\n\nconst FileDatagridRow = ({ record, resource, id, onToggleItem, children, selected, basePath }) => (\n    <TableRow key={id}>\n        {/* first column: selection checkbox */}\n        <TableCell padding=\"none\">\n            {(\n                record.user === JSON.parse(localStorage.getItem('auth')).user_id\n                || JSON.parse(localStorage.getItem('user')).user.is_admin\n            ) \n            && <Checkbox\n                checked={selected}\n                onClick={() => onToggleItem(id)}\n            />}\n        </TableCell>\n        {/* data columns based on children */}\n        {React.Children.map(children, field => (\n            <TableCell key={`${id}-${field.props.source}`}>\n                {React.cloneElement(field, {\n                    record,\n                    basePath,\n                    resource,\n                })}\n            </TableCell>\n        ))}\n    </TableRow>\n)\n\nconst FileDatagridBody = props => <DatagridBody {...props} row={<FileDatagridRow />} />;\nconst FileDatagrid = props => <Datagrid {...props} body={<FileDatagridBody />} />;","// in src/Dashboard.js\nimport React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\n\nexport default () => (\n    <Card>\n        <CardHeader title=\"Welcome to the administration\" />\n        <CardContent>Go to this one to Delete unnecessary files <a href=\"https://nguyenchitien195.github.io/slack-manager-v2/#/files\">File manager</a></CardContent>\n    </Card>\n);","// in src/authProvider.js\nimport { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\n\nexport default (type, params) => {\n    // called when the user attempts to log in\n    if (type === AUTH_LOGIN) {\n        const { username } = params;\n        localStorage.setItem('username', username);\n        // accept all username/password combinations\n        return Promise.resolve();\n    }\n    // called when the user clicks on the logout button\n    if (type === AUTH_LOGOUT) {\n        localStorage.clear();\n        sessionStorage.clear();\n        return Promise.resolve();\n    }\n    // called when the API returns an error\n    if (type === AUTH_ERROR) {\n        const { status } = params;\n        if (status === 401 || status === 403) {\n            localStorage.removeItem('username');\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    }\n    // called when the user navigates to a new location\n    if (type === AUTH_CHECK) {\n        return localStorage.getItem('auth')\n            ? Promise.resolve()\n            : Promise.reject();\n    }\n    return Promise.reject('Unknown method');\n};","// in src/dataProvider\nimport {\n    GET_LIST,\n    GET_ONE,\n    GET_MANY,\n    GET_MANY_REFERENCE,\n    CREATE,\n    UPDATE,\n    DELETE_MANY,\n    fetchUtils,\n} from 'react-admin';\n\nimport { get, post, put, del } from 'fetchutils';\nimport Helper from './helper.js';\n\nconst API_URL = 'https://slack.com/api';\nconst TOKEN = localStorage.getItem('auth') ? JSON.parse(localStorage.getItem('auth')).access_token : '';\nconst CURRENT_USER = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')).user : '';\nconst PREFIX = 'm_';\n\n/**\n * @param {string} type Request type, e.g GET_LIST, GET_MANY from react-admin\n * @param {string} resource Resource name, e.g. \"files\", \"users\"\n * @param {Object} payload Request parameters. Depends on the request type\n * @returns {Promise} the Promise for response\n */\nexport default (type, resource, params) => {\n    if (!TOKEN) return;\n    console.group(\"============== dataProvider =============\");\n    console.log(type);\n    console.log(resource);\n    console.log(params);\n    console.groupEnd();\n\n    switch(type) {\n        case GET_LIST:\n            switch(resource) {\n                case \"files\":\n                    if (window.demo) {\n                        return handleData(params, window.demo);\n                    } else if (sessionStorage.getItem('files')) {\n                        let storageObject = JSON.parse(sessionStorage.getItem('files'));\n                        return handleData(params, storageObject);\n                    }\n                    return Promise.all([getAllChannels(), getAllUsers()]).then(values => {\n                        let allChannels = values[0];\n                        let allUsers = values[1];\n                        return getAllFiles(allChannels, allUsers).then(allFiles => {\n                            return handleData(params, allFiles);\n                        });\n                    })\n                case \"users\":\n                    return getAllUsers().then(users => {\n                        return handleData(params, users);\n                    });\n                case \"channels\":\n                    return getAllChannels().then(channels => {\n                        return handleData(params, channels);\n                    });\n                case \"groups\":\n                    return getAllGroups().then(groups => {\n                        return handleData(params, groups);\n                    });\n            }\n            break;\n        // case GET_MANY:\n        case DELETE_MANY:\n            deleteFiles(params.ids);\n        default:\n            return;\n    }\n};\n\n/*\n * handleData: filter and sort data\n * params:\n * \n * output: { data: {Record[]}, total: {int} }\n */\n\nconst handleData = (params, data) => {\n    // Filter\n    data = data.filter(value => filter(value, params.filter));\n    if (Array.isArray(data) && data.length > 0) {\n        if (data[0] && data[0].hasOwnProperty('filetype')) {\n            // Set text of span on AppBar: set total size\n            if (document.getElementById('react-admin-title')) {\n                document.getElementById('react-admin-title').childNodes[0].innerHTML = Helper.toSizeString(getSizeOfListFile(data));\n            } else {\n                document.addEventListener(\"DOMContentLoaded\", function() { \n                    document.getElementById('react-admin-title').childNodes[0].innerHTML = Helper.toSizeString(getSizeOfListFile(data));\n                });\n            }\n        }\n    }\n    // Sort\n    let list = Helper.stableSort(\n        data,\n        Helper.getSorting(params.sort.order, params.sort.field)\n    );\n    // Pagination\n    let {page, perPage} = params.pagination;\n    return {\n        data: pagination(page, perPage, list),\n        total: list.length\n    };\n}\n\nfunction getSizeOfListFile(files) {\n    let size = 0;\n    for (let file of files) {\n        size += file.size;\n    }\n    \n    return size;\n}\n\n\nfunction filter(data, filters) {\n    const filterKeys = Object.keys(filters);\n\n    for (let key of filterKeys) {\n        // check filter is array\n        if (Array.isArray(filters[key])) {\n            let isCheckArray = false;\n            for (let v of filters[key]) {\n                if (Array.isArray(data[key])) {\n                    if (filterDataArray(v, data[key])) {\n                        isCheckArray = true;\n                        break;\n                    }\n                } else if (data[key] === v) {\n                    isCheckArray = true;\n                    break;\n                }\n            }\n            if (!isCheckArray) return false;\n        } else if (Array.isArray(data[key])) {\n            if (!filterDataArray(filters[key], data[key])) return false;\n        } else if (data[key] !== filters[key]) {\n            if (!searchDataArray(filters[key], data[key])) return false;\n        }\n    }\n    \n    return true;\n}\n\nfunction filterDataArray(filterValue, dataArray) {\n    for (let v of dataArray) {\n        if (filterValue === v) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction searchDataArray(filterValue, dataArray) {\n    let check = dataArray.toLowerCase().indexOf(filterValue.toLowerCase());\n    if (check !== -1) {\n        return true;\n    }\n    return false;\n}\n\nconst pagination = (page, perPage, data) => {\n    page = page - 1;\n    let startSlice = page * perPage;\n    let endSlice = startSlice + perPage;\n    return data.slice(startSlice, endSlice);\n}\n\nfunction getAllChannels() {\n    return new Promise(function(resolve, reject) {\n        get(`${API_URL}/channels.list?token=${TOKEN}&count=1000`).then(response => {\n            const finalChannels = compactChannels(response.channels);\n            sessionStorage.setItem('channels', JSON.stringify(compactChannels(finalChannels)));\n            resolve(finalChannels);\n        });\n    })\n}\n\n/**\n * compactChannels()\n * \n * Remove archive channel\n * Remove channel that member not join\n*/ \nfunction compactChannels(channels) {\n    if (CURRENT_USER.is_dev) {\n        return channels;\n    } else {\n        return channels.filter((channel) => !channel.is_archived && channel.members.includes(CURRENT_USER.id));\n    }\n}\n\nfunction getAllGroups() {\n    return new Promise(function(resolve, reject) {\n        let param = '';\n        if (CURRENT_USER.is_dev) {\n            param = '&exclude_archived=true';\n        }\n        get(`${API_URL}/groups.list?token=${TOKEN}${param}`).then(response => {\n            sessionStorage.setItem('groups', JSON.stringify(response.groups));\n            resolve(response.groups);\n        });\n    })\n}\n\nfunction getAllUsers() {\n    return new Promise(function(resolve, reject) {\n        get(`${API_URL}/users.list?token=${TOKEN}&count=1000`).then(response => {\n            sessionStorage.setItem('users', JSON.stringify(response.members));\n            resolve(response.members);\n        });\n    })\n}\n\n\nfunction getAllFiles(listChannels, listUsers) {\n    return new Promise(function(resolve, reject) {\n        let param = '';\n        if (!CURRENT_USER.is_admin && !CURRENT_USER.is_dev) {\n            param = `&user=${CURRENT_USER.id}`;\n        }\n        get(`${API_URL}/files.list?token=${TOKEN}${param}&count=100&page=1`).then(response => {\n            let result = [];\n\n            response.files.map(file => {\n                if (!CURRENT_USER.is_dev && !file.channels) {\n                    let isInTheChannel = false;\n                    file.channels.map(fChannelId => {\n                        for (let i = 0; i < listChannels.length; i++) {\n                            if (listChannels[i].id === fChannelId) {\n                                isInTheChannel = true;\n                                break;\n                            }\n                        }\n                    })\n\n\n                    if (isInTheChannel) {\n                        file[PREFIX + 'users'] = getUserNameByFile(listUsers, file);\n                        file[PREFIX + 'channels'] = getChannelNamesByFile(listChannels, file);\n                        result.push(file);\n                    }\n                } else {\n                    file[PREFIX + 'users'] = getUserNameByFile(listUsers, file);\n                    file[PREFIX + 'channels'] = getChannelNamesByFile(listChannels, file);\n                    result.push(file);\n                }\n            });\n\n            if (response.paging.pages > 1) {\n                let listUrl = [];\n                for (let page = 2; page <= response.paging.pages; page++) {\n                    listUrl.push(`${API_URL}/files.list?token=${TOKEN}${param}&count=100&page=${page}`);\n                }\n                Promise.all(\n                    listUrl.map(url => {\n                        return get(url).then(res => {\n                            return res;\n                        })\n                    })\n                ).then(values => {\n                    values.map(value => {\n                        value.files.map(file => {\n                            let isInTheChannel = false;\n                            if (!CURRENT_USER.is_dev) {\n                                file.channels.map(fChannelId => {\n                                    for (let i = 0; i < listChannels.length; i++) {\n                                        if (listChannels[i].id === fChannelId) {\n                                            isInTheChannel = true;\n                                            break;\n                                        }\n                                    }\n                                })\n            \n            \n                                if (isInTheChannel) {\n                                    file[PREFIX + 'users'] = getUserNameByFile(listUsers, file);\n                                    file[PREFIX + 'channels'] = getChannelNamesByFile(listChannels, file);\n                                    result.push(file);\n                                }\n                            } else {\n                                file[PREFIX + 'users'] = getUserNameByFile(listUsers, file);\n                                file[PREFIX + 'channels'] = getChannelNamesByFile(listChannels, file);\n                                result.push(file);\n                            }\n                        })\n                    })\n                    sessionStorage.setItem('files', JSON.stringify(result));\n                    resolve(result);\n                });\n            } else {\n                sessionStorage.setItem('files', JSON.stringify(result));\n                resolve(result);\n            }\n        });\n    })\n}\n\n/**\n * get Name of User of File\n * \n * @param listUsers array\n * @param file object\n * @return string\n */\nfunction getUserNameByFile(listUsers, file) {\n    for (let j = 0; j < listUsers.length; j++) {\n        if (file['user'] === listUsers[j]['id']) {\n            return listUsers[j]['name'];\n        }\n    }\n\n    return 'no name';\n}\n\n/**\n * \n * @param {array} listChannels \n * @param {object} file \n * \n * @return array\n */\n\nfunction getChannelNamesByFile(listChannels, file) {\n    let uniqueChannels = file.channels.filter(function(item, pos) {\n        return file.channels.indexOf(item) == pos;\n    })\n    let result = [];\n\n    for (let i = 0; i < uniqueChannels.length; i++) {\n        for (let j = 0; j < listChannels.length; j++) {\n            if (uniqueChannels[i] === listChannels[j].id) {\n                if (result.find(obj => obj.id === listChannels[j].id)) {\n                    console.error(file);\n                }\n                result.push({\n                    id: listChannels[j].id,\n                    name: listChannels[j].name\n                });\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction deleteFiles(fileIds) {\n    return new Promise(function(resolve, reject) {\n        let files = fileIds;\n        for (let i=0; i < fileIds.length; i++) {\n            fetch(`${API_URL}/files.delete?token=${TOKEN}&file=${fileIds[i]}`, {method: 'post'}).then(res => {\n                files = fileIds.filter(file => file !== fileIds[i]);\n            });\n        }\n        let allFiles = JSON.parse(sessionStorage.getItem('files')).filter(file => {\n            return !files.includes(file.id);\n        });\n        sessionStorage.setItem('files', JSON.stringify(allFiles));\n        window.demo = allFiles;\n    })\n}","// in src/MyLoginPage.js\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { userLogin } from 'admin-on-rest';\n\nimport './Login.css';\n\nconst aStyle = {\n    position: 'absolute',\n    left: 'calc(50% - 172px/2)',\n    top: 'calc(50% - 43px/2)'\n}\n\nclass MyLoginPage extends Component {\n    submit = (e) => {\n        e.preventDefault();\n        // gather your data/credentials here\n        const credentials = { };\n\n        // Dispatch the userLogin action (injected by connect)\n        this.props.userLogin(credentials);\n    }\n\n    render() {\n        return (\n            <a style={aStyle} href=\"https://slack.com/oauth/authorize?\n                scope=files%3Awrite%3Auser+users%3Aread+files%3Aread+search%3Aread+channels%3Aread+groups%3Aread\n                &client_id=231613720450.347038352342\">\n                <img alt=\"Sign in with Slack\"\n                height=\"40\" width=\"172\"\n                src=\"https://platform.slack-edge.com/img/sign_in_with_slack.png\"\n                srcSet=\"https://platform.slack-edge.com/img/sign_in_with_slack.png 1x, https://platform.slack-edge.com/img/sign_in_with_slack@2x.png 2x\" />\n            </a>\n        );\n    }\n};\n\nexport default connect(undefined, { userLogin })(MyLoginPage);","import React from 'react';\nimport { AppBar, UserMenu, MenuItemLink } from 'react-admin';\nimport { withStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport SettingsIcon from '@material-ui/icons/Settings';\n\nconst myCustomIconStyle = {\n    avatar: {\n        height: 30,\n        width: 30,\n    },\n};\n\nconst MyCustomIcon = withStyles(myCustomIconStyle)(\n    ({ classes }) => (\n        <div>\n            <Avatar\n                id=\"avatar\"\n                className={classes.avatar}\n                src={localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')).user.profile.image_32 : ''}\n            />\n        </div>\n    )\n);\n\nconst MyUserMenu = props => (\n    <UserMenu {...props} icon={<MyCustomIcon />}>\n        <MenuItemLink\n            to=\"/configuration\"\n            primaryText=\"Configuration\"\n            leftIcon={<SettingsIcon />}\n        />\n    </UserMenu>\n);\n\nexport default MyUserMenu;","import React from 'react';\nimport { AppBar } from 'react-admin';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport MyUserMenu from './MyUserMenu';\n\nconst styles = {\n    title: {\n        flex: 1,\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n    },\n    spacer: {\n        flex: 1,\n    },\n};\n\nconst MyAppBar = withStyles(styles)(({ classes, ...props }) => (\n    <AppBar {...props} userMenu={<MyUserMenu />}>\n        <Typography\n            variant=\"title\"\n            color=\"inherit\"\n            className={classes.title}\n            id=\"react-admin-title\"\n        />\n        <span id=\"react-admin-header\" className={classes.spacer}>{(localStorage.getItem('user')) ? JSON.parse(localStorage.getItem('user')).user.profile.display_name : ''}</span>\n    </AppBar>\n));\n\nexport default MyAppBar;","import React from 'react';\nimport { Layout } from 'react-admin';\nimport MyAppBar from './MyAppBar';\n\nconst MyLayout = (props) => <Layout {...props} appBar={MyAppBar} />;\n\nexport default MyLayout;","import React from 'react';\nimport './App.css';\nimport { Admin, Resource } from 'react-admin';\nimport { UserList } from './users';\nimport { ChannelList } from './channels';\nimport { GroupList } from './groups';\nimport { FileList } from './files';\nimport UserIcon from '@material-ui/icons/Group';\nimport FileIcon from '@material-ui/icons/FileUpload';\nimport Dashboard from './Dashboard';\nimport authProvider from './authProvider';\nimport dataProvider from './dataProvider';\nimport MyLoginPage from './MyLoginPage';\nimport MyLayout from './MyLayout';\n\nconst App = () => (\n  <Admin appLayout={MyLayout} loginPage={MyLoginPage} dashboard={Dashboard} authProvider={authProvider} dataProvider={dataProvider}>\n    <Resource name=\"files\" list={FileList} icon={FileIcon} />\n    <Resource name=\"users\" list={UserList} icon={UserIcon} />\n    <Resource name=\"channels\" list={ChannelList} icon={UserIcon} />\n    <Resource name=\"groups\" list={GroupList} icon={UserIcon} />\n  </Admin>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n// serviceWorker.register();\n"],"sourceRoot":""}